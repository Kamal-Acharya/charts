{{- range .Values.migrations }}
{{- if eq .enable true }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $.Release.Name  }}-{{ .DB_NAME | replace "_" "-" }}-{{ randAlphaNum 5 | lower }}
  annotations: {}
  labels:
    job: {{ $.Release.Name }}-migration
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: migrator-container
        image: {{ $.Values.image }}
        command: ["/bin/sh", "-c"]
        args:
            - |
              #!/bin/sh
              set -e
              set -o pipefail
              apk add git
              echo "git cloning"
              git clone $REPO_URL
              cd $(REPO_NAME)
              # Check out the specific branch
              git checkout $BRANCH_NAME
              echo $COMMIT_HASH
              if [ -z $(COMMIT_HASH)  ]; then
                echo "we are on latest commit"
              else
                echo "git checkout on"
                echo $COMMIT_HASH
                # Check out the specific commit hash
                git checkout $COMMIT_HASH
              fi

              # Verify that you are on the correct branch and commit
              CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
              CURRENT_COMMIT=$(git rev-parse HEAD)

              echo "Current branch: $CURRENT_BRANCH"
              echo "Current commit: $CURRENT_COMMIT"
              echo "Migrating to version (0 for latest)"
              echo $(MIGRATE_TO_VERSION);
              if [ "$(DB_TYPE)" = "postgres" ]; then
                echo "migration for postgres"
                if [ $(MIGRATE_TO_VERSION) -eq "0" ]; then
                  migrate -path $(SCRIPT_LOCATION) -database postgres://$(DB_USER_NAME):$(DB_PASSWORD)@$(DB_HOST):$(DB_PORT)/$(DB_NAME)?$(PARAM) up;
                else
                  migrate -path $(SCRIPT_LOCATION) -database postgres://$(DB_USER_NAME):$(DB_PASSWORD)@$(DB_HOST):$(DB_PORT)/$(DB_NAME)?$(PARAM) goto $(MIGRATE_TO_VERSION);
                fi
              elif [ "$(DB_TYPE)" = "mongodb" ]; then
                echo "migration for mongodb"
                if [ $(MIGRATE_TO_VERSION) -eq "0" ]; then
                  migrate -path $(SCRIPT_LOCATION) -database mongodb://$(DB_USER_NAME):$(DB_PASSWORD)@$(DB_HOST):$(DB_PORT)/$(DB_NAME)?$(PARAM) up;
                else
                  migrate -path $(SCRIPT_LOCATION) -database mongodb://$(DB_USER_NAME):$(DB_PASSWORD)@$(DB_HOST):$(DB_PORT)/$(DB_NAME)?$(PARAM) goto $(MIGRATE_TO_VERSION);
                fi
              elif [ "$(DB_TYPE)" = "mysql" ]; then
                echo "migration for mysql"
                DB="tcp($DB_HOST:$DB_PORT)"
                echo $DB
                if [ $MIGRATE_TO_VERSION -eq "0" ]; then
                  migrate -path $SCRIPT_LOCATION -database mysql://$DB_USER_NAME:$DB_PASSWORD@$DB/$DB_NAME?$PARAM up;
                else
                  migrate -path $SCRIPT_LOCATION -database mysql://$DB_USER_NAME:$DB_PASSWORD@$DB_HOST:$DB?$PARAM goto $MIGRATE_TO_VERSION;
                fi
              elif [ "$(DB_TYPE)" = "sqlserver" ]; then
                echo "migration for sqlserver"
                if [ $(MIGRATE_TO_VERSION) -eq "0" ]; then
                  migrate -path $(SCRIPT_LOCATION) -database sqlserver://$(DB_USER_NAME):$(DB_PASSWORD)@$(DB_HOST):$(DB_PORT)?$(PARAM) up;
                else
                  migrate -path $(SCRIPT_LOCATION) -database sqlserver://$(DB_USER_NAME):$(DB_PASSWORD)@$(DB_HOST):$(DB_PORT)?$(PARAM) goto $(MIGRATE_TO_VERSION);
                fi
              else
                echo "no database matched"
              fi
        env:
          - name: REPO_URL
            value: {{ .REPO_URL }}
          - name: BRANCH_NAME
            value: {{ .BRANCH }}
          {{- if .COMMIT }}
          - name: COMMIT_HASH
            value: {{ .COMMIT }}
          {{- end}}
          - name: REPO_NAME
            value: {{ .REPO_NAME }}
          - name: SCRIPT_LOCATION
            value: {{ .SCRIPT_LOCATION }}
          - name: MIGRATE_TO_VERSION
            value: {{ .VERSION | quote }}
          - name: DB_NAME
            value: {{ .DB_NAME }}
          - name: PARAM
            value: {{ .PARAM }}
        envFrom:
          - secretRef:
              name: {{ $.Release.Name  }}-secret
          - configMapRef:
                name: {{ $.Release.Name  }}-configmap
---
{{-  end }}
{{-  end }}
